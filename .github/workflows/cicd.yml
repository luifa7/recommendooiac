name: Terraform Apply

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1.3.2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Extract credentials from secret
        id: creds
        run: |
          creds=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -c .)
          echo "::set-output name=client_id::$(echo $creds | jq -r '.client_id')"
          echo "::set-output name=client_secret::$(echo $creds | jq -r '.client_secret')"
          echo "::set-output name=tenant_id::$(echo $creds | jq -r '.tenant_id')"
          echo "::set-output name=subscription_id::$(echo $creds | jq -r '.subscription_id')"
        shell: bash

      - name: Terraform Initialize
        run: terraform init
        working-directory: environments/prod
        env:
          ARM_CLIENT_ID: ${{ steps.creds.outputs.client_id }}
          ARM_CLIENT_SECRET: ${{ steps.creds.outputs.client_secret }}
          ARM_TENANT_ID: ${{ steps.creds.outputs.tenant_id }}
          ARM_SUBSCRIPTION_ID: ${{ steps.creds.outputs.subscription_id }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: environments/prod

      - name: Terraform Plan
        run: terraform plan -no-color -var="sql_administrator_login_password=${{ secrets.SQL_ADMIN_LOGIN_PASS }}"
        continue-on-error: true
        working-directory: environments/prod

      - name: Terraform Apply
        run: terraform apply -auto-approve -no-color -var="sql_administrator_login_password=${{ secrets.SQL_ADMIN_LOGIN_PASS }}"
        working-directory: environments/prod
